{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","componentDidMount","width","window","innerWidth","Screen","setState","getData","a","fetch","method","headers","process","then","response","json","catch","err","console","log","data","lastChecked","dataFilterFromrapidapi","newData","covid19Stats","map","e","newItem","province","case","confirmed","deaths","push","state","className","this","height","margin","top","right","left","bottom","strokeDasharray","dataKey","verticalAlign","wrapperStyle","lineHeight","textTransform","y","stroke","fill","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uTAgGeA,EAnFf,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,kBAAoB,WAClB,IAAMC,EAAQC,OAAOC,WAAa,EAAID,OAAOC,WAAaC,OAAOH,MACjE,EAAKI,SAAS,CAAEJ,MAAOA,IACvB,EAAKK,WAbY,EAenBA,QAfmB,sBAeT,4BAAAC,EAAA,sEACeC,MACrB,8EACA,CACEC,OAAQ,MACRC,QAAS,CACP,kBAAmBC,iDACnB,iBAAkBA,wDAIrBC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,MAfR,OACFH,EADE,OAkBRI,QAAQC,IAAIL,EAASM,MACrB,EAAKd,SAAS,CAAEe,YAAaP,EAASM,KAAKC,cAC3C,EAAKf,SAAS,CAAEc,KAAM,EAAKE,uBAAuBR,EAASM,QApBnD,2CAfS,EAqCnBE,uBAAyB,SAAAF,GACvB,IAAIG,EAAU,GAUd,OATAH,EAAKI,aAAaC,KAAI,SAAAC,GACpB,IAAIC,EAAU,CACZC,SAAUF,EAAEE,SACZC,KAAMH,EAAEI,UACRC,OAAQL,EAAEK,QAEZ,OAAOR,EAAQS,KAAKL,MAEtBT,QAAQC,IAAII,GACLA,GA9CP,EAAKU,MAAQ,CACX/B,MAAO,EACPmB,YAAa,GACbD,KAAM,IALS,EADrB,qDAoDI,OACE,yBAAKc,UAAU,mBACb,wBAAIA,UAAU,UAAd,4BACA,wCAAcC,KAAKF,MAAMZ,aACzB,kBAAC,IAAD,CAAqBnB,MAAM,MAAMkC,OAAQ,KACvC,kBAAC,IAAD,CACEhB,KAAMe,KAAKF,MAAMb,KACjBiB,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAE/C,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,aACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEC,cAAc,MACdC,aAAc,CACZC,WAAY,OACZC,cAAe,gBAGnB,kBAAC,IAAD,CAAeC,EAAG,EAAGC,OAAO,SAC5B,kBAAC,IAAD,CAAON,QAAQ,OAAOP,OAAQ,GAAIa,OAAO,YACzC,kBAAC,IAAD,CAAKN,QAAQ,SAASO,KAAK,QAC3B,kBAAC,IAAD,CAAKP,QAAQ,OAAOO,KAAK,mBA3ErC,GAA2BC,aCDZC,MARf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,QCKcmB,QACW,cAA7BlD,OAAOmD,SAASC,UAEe,UAA7BpD,OAAOmD,SAASC,UAEhBpD,OAAOmD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdlD,OAAM,SAAAmD,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.b4a4027a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  Brush,\r\n  ReferenceLine,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\nexport class Chart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      width: 0,\r\n      lastChecked: \"\",\r\n      data: [\r\n        // { name: \"Page A\", uv: 4000, pv: 2400, amt: 2400 },\r\n      ]\r\n    };\r\n  }\r\n  componentDidMount = () => {\r\n    const width = window.innerWidth > 0 ? window.innerWidth : Screen.width;\r\n    this.setState({ width: width });\r\n    this.getData();\r\n  };\r\n  getData = async () => {\r\n    const response = await fetch(\r\n      \"https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats?country=USA\",\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"x-rapidapi-host\": process.env.REACT_APP_API_rapidapi_host,\r\n          \"x-rapidapi-key\": process.env.REACT_APP_API_rapidapi_key\r\n        }\r\n      }\r\n    )\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n\r\n    console.log(response.data);\r\n    this.setState({ lastChecked: response.data.lastChecked });\r\n    this.setState({ data: this.dataFilterFromrapidapi(response.data) });\r\n  };\r\n  dataFilterFromrapidapi = data => {\r\n    let newData = [];\r\n    data.covid19Stats.map(e => {\r\n      let newItem = {\r\n        province: e.province,\r\n        case: e.confirmed,\r\n        deaths: e.deaths\r\n      };\r\n      return newData.push(newItem);\r\n    });\r\n    console.log(newData);\r\n    return newData;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <h1 className=\"center\">Coronavirus Cases in USA</h1>\r\n        <p>Updated : {this.state.lastChecked}</p>\r\n        <ResponsiveContainer width=\"95%\" height={400}>\r\n          <BarChart\r\n            data={this.state.data}\r\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"province\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend\r\n              verticalAlign=\"top\"\r\n              wrapperStyle={{\r\n                lineHeight: \"40px\",\r\n                textTransform: \"capitalize\"\r\n              }}\r\n            />\r\n            <ReferenceLine y={0} stroke=\"#000\" />\r\n            <Brush dataKey=\"name\" height={30} stroke=\"#8884d8\" />\r\n            <Bar dataKey=\"deaths\" fill=\"red\" />\r\n            <Bar dataKey=\"case\" fill=\"#82ca9d\" />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Chart from \"./components/Chart\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}