{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","componentDidMount","width","window","innerWidth","Screen","setState","getData","a","fetch","method","then","response","json","totalInfo","dataUpdate","Date","updated","toString","catch","err","console","log","data","dataFilterFromrapidapi","newData","map","e","newItem","state","cases","deaths","todayCases","push","className","this","height","margin","top","right","left","bottom","strokeDasharray","dataKey","verticalAlign","wrapperStyle","lineHeight","textTransform","y","stroke","startIndex","endIndex","fill","cursor","strokeWidth","type","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uTAgHeA,EAlGf,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,kBAAoB,WAClB,IAAMC,EAAQC,OAAOC,WAAa,EAAID,OAAOC,WAAaC,OAAOH,MACjE,EAAKI,SAAS,CAAEJ,MAAOA,IACvB,EAAKK,WAbY,EAgBnBA,QAhBmB,sBAgBT,8BAAAC,EAAA,sEACgBC,MAAM,gCAAiC,CAC7DC,OAAQ,QACPC,MAAK,SAAAC,GACN,OAAOA,EAASC,UAJV,cACFC,EADE,OAOR,EAAKR,SAAS,CAAES,WAAY,IAAIC,KAAKF,EAAUG,SAASC,aAPhD,SAQeT,MAAM,mCAAoC,CAC/DC,OAAQ,QAEPC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBM,OAAM,SAAAC,GACLC,QAAQC,IAAIF,MAfR,OAQFR,EARE,OAkBR,EAAKN,SAAS,CAAEiB,KAAM,EAAKC,uBAAuBZ,KAlB1C,2CAhBS,EAoCnBY,uBAAyB,SAAAD,GACvB,IAAIE,EAAU,GAWd,OAVAF,EAAKG,KAAI,SAAAC,GACP,IAAIC,EAAU,CACZC,MAAOF,EAAEE,MACTC,MAAOH,EAAEG,MACTC,OAAQJ,EAAEI,OACVC,WAAYL,EAAEK,YAEhB,OAAOP,EAAQQ,KAAKL,MAGfH,GA9CP,EAAKI,MAAQ,CACX3B,MAAO,EACPa,WAAY,GACZQ,KAAM,IALS,EADrB,qDAoDI,OACE,yBAAKW,UAAU,mBACb,wBAAIA,UAAU,UAAd,yBACA,6CACkBC,KAAKN,MAAMd,WAC3B,6BAFF,4CAKA,kBAAC,IAAD,CAAqBb,MAAM,MAAMkC,OAAQ,KACvC,kBAAC,IAAD,CACEb,KAAMY,KAAKN,MAAMN,KACjBc,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAE/C,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,UACf,kBAAC,IAAD,MAEA,kBAAC,IAAD,CACEC,cAAc,MACdC,aAAc,CACZC,WAAY,OACZC,cAAe,gBAInB,kBAAC,IAAD,CAAeC,EAAG,EAAGC,OAAO,SAC5B,kBAAC,IAAD,CACEC,WAAY,EACZC,SAAU,GACVR,QAAQ,OACRP,OAAQ,GACRa,OAAO,YAET,kBAAC,IAAD,CAAKN,QAAQ,aAAaS,KAAK,YAC/B,kBAAC,IAAD,CAAKT,QAAQ,QAAQS,KAAK,YAC1B,kBAAC,IAAD,CACEC,OAAQ,CAAEJ,OAAQ,yBAA0BK,YAAa,MAE3D,kBAAC,IAAD,CAAMC,KAAK,WAAWZ,QAAQ,SAASS,KAAK,MAAMH,OAAO,eA1FrE,GAA2BO,aCFZC,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCKcwB,QACW,cAA7BvD,OAAOwD,SAASC,UAEe,UAA7BzD,OAAOwD,SAASC,UAEhBzD,OAAOwD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdpD,OAAM,SAAAqD,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.2ebc508c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  ComposedChart,\n  Bar,\n  Brush,\n  ReferenceLine,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Area,\n  ResponsiveContainer\n} from \"recharts\";\nexport class Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0,\n      dataUpdate: \"\",\n      data: [\n        // { name: \"Page A\", uv: 4000, pv: 2400, amt: 2400 },\n      ]\n    };\n  }\n  componentDidMount = () => {\n    const width = window.innerWidth > 0 ? window.innerWidth : Screen.width;\n    this.setState({ width: width });\n    this.getData();\n  };\n\n  getData = async () => {\n    const totalInfo = await fetch(\"https://corona.lmao.ninja/all\", {\n      method: \"GET\"\n    }).then(response => {\n      return response.json();\n    });\n\n    this.setState({ dataUpdate: new Date(totalInfo.updated).toString() });\n    const response = await fetch(\"https://corona.lmao.ninja/states\", {\n      method: \"GET\"\n    })\n      .then(response => {\n        return response.json();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n    this.setState({ data: this.dataFilterFromrapidapi(response) });\n  };\n  dataFilterFromrapidapi = data => {\n    let newData = [];\n    data.map(e => {\n      let newItem = {\n        state: e.state,\n        cases: e.cases,\n        deaths: e.deaths,\n        todayCases: e.todayCases\n      };\n      return newData.push(newItem);\n    });\n\n    return newData;\n  };\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <h1 className=\"center\">Covid-19 Cases in USA</h1>\n        <p>\n          Last updated : {this.state.dataUpdate}\n          <br></br>\n          Data from https://www.worldometers.info/\n        </p>\n        <ResponsiveContainer width=\"95%\" height={400}>\n          <ComposedChart\n            data={this.state.data}\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"state\" />\n            <YAxis />\n\n            <Legend\n              verticalAlign=\"top\"\n              wrapperStyle={{\n                lineHeight: \"40px\",\n                textTransform: \"capitalize\"\n              }}\n            />\n\n            <ReferenceLine y={0} stroke=\"#000\" />\n            <Brush\n              startIndex={0}\n              endIndex={10}\n              dataKey=\"name\"\n              height={30}\n              stroke=\"#53DB90\"\n            ></Brush>\n            <Bar dataKey=\"todayCases\" fill=\"#8884d8\" />\n            <Bar dataKey=\"cases\" fill=\"#82ca9d\" />\n            <Tooltip\n              cursor={{ stroke: \"rgba(126, 88, 96, 0.2)\", strokeWidth: 30 }}\n            />\n            <Area type=\"monotone\" dataKey=\"deaths\" fill=\"red\" stroke=\"red\" />\n          </ComposedChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n}\n\nexport default Chart;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Chart from \"./components/Chart\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}